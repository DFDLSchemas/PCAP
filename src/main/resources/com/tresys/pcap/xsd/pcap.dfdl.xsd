<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright (c) 2012-2014 Tresys Technology, LLC. All rights reserved.

Developed by: Tresys Technology, LLC
              http://www.tresys.com

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal with
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimers.

 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimers in the
    documentation and/or other materials provided with the distribution.

 3. Neither the names of Tresys Technology, nor the names of its contributors
    may be used to endorse or promote products derived from this Software
    without specific prior written permission.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE
SOFTWARE.
-->


<!--
Version 1.1  pcap.dfdl.xsd

Change History
1.1: Support parsing link layer (ethernet), network layer (ipv4, ipv6, icmpv4)
     and transport layer (tcp, udp)

This DFDL schema provides a DFDL model for PCAP v2.4 binary data, which
contains network packet capture data.

The message root is 'PCAP'.
-->


<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
           xmlns:fn="http://www.w3.org/2005/xpath-functions"
           xmlns:daf="urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext"
           xmlns:dfdlx="http://www.ogf.org/dfdl/dfdl-1.0/extensions"
           xmlns:pcap="urn:pcap:2.4"
           targetNamespace="urn:pcap:2.4">

  <xs:annotation>
    <xs:appinfo source="http://www.ogf.org/dfdl/">
      <dfdl:defineVariable name="ByteOrder" type="xs:string" />

      <dfdl:defineFormat name="defaults">
        <dfdl:format alignment="1" alignmentUnits="bits"
        binaryBooleanFalseRep="0" binaryBooleanTrueRep="1"
        binaryCalendarEpoch="1970-01-01T00:00:00+00:00" binaryCalendarRep="bcd"
        binaryDecimalVirtualPoint="0" binaryFloatRep="ieee"
        binaryNumberCheckPolicy="lax" binaryNumberRep="binary"
        binaryPackedSignCodes="C D F C" calendarCenturyStart="53"
        calendarCheckPolicy="lax" calendarDaysInFirstWeek="4"
        calendarFirstDayOfWeek="Monday" calendarLanguage="en-US"
        calendarObserveDST="yes" calendarPatternKind="implicit"
        calendarPattern="yyyy-MM-dd'T'HH:mm:ss" calendarTimeZone="UTC"
        choiceLengthKind="implicit" decimalSigned="yes"
        documentFinalTerminatorCanBeMissing="no" emptyValueDelimiterPolicy="none"
        encoding="utf-8" encodingErrorPolicy="replace" escapeSchemeRef=""
        fillByte="%NUL;" floating="no" ignoreCase="no" initiatedContent="no"
        initiator="" leadingSkip="0" lengthKind="implicit" lengthUnits="bits"
        nilKind="literalValue" nilValueDelimiterPolicy="none" nilValue="NIL"
        occursCountKind="implicit" outputNewLine="%CR;%LF;"
        prefixIncludesPrefixLength="no" representation="binary" separator=""
        separatorPosition="infix" sequenceKind="ordered" terminator=""
        textBidi="no" textBooleanFalseRep="false" textBooleanJustification="left"
        textBooleanPadCharacter="%SP;" textBooleanTrueRep="true"
        textCalendarJustification="left" textCalendarPadCharacter="%SP;"
        textNumberCheckPolicy="lax" textNumberJustification="right"
        textNumberPadCharacter="0" textNumberPattern="#0" textNumberRep="standard"
        textNumberRoundingIncrement="0.0" textNumberRoundingMode="roundUp"
        textNumberRounding="pattern" textOutputMinLength="0" textPadKind="none"
        textStandardBase="10" textStandardDecimalSeparator="."
        textStandardGroupingSeparator="," textStandardInfinityRep="Inf"
        textStandardNaNRep="NaN" textStandardZeroRep=""
        textStringJustification="left" textStringPadCharacter="%SP;"
        textTrimKind="none" textZonedSignStyle="asciiStandard" trailingSkip="0"
        truncateSpecifiedLengthString="no" useNilForDefault="no" utf16Width="fixed"
        bitOrder="mostSignificantBitFirst"/>
      </dfdl:defineFormat>

      <dfdl:format ref="pcap:defaults" byteOrder="{ $pcap:ByteOrder }" />

      <!--
        Used to eliminate common subexpression in outputValueCalc of InclLen
        -->
      <dfdl:defineVariable name="valueLen" type="xs:int" dfdlx:direction="unparseOnly"/>

      <!--
        used for unparsing when breaking up the parts of an IP address string 1.2.3.4 separated by dots.
        It starts as 1.2.3.4
        Then 2.3.4
        Then 3.4
        Then 4
      -->

      <!-- Internally used by ipAddressGroup -->
      <dfdl:defineVariable name="remainingDottedAddr" type="xs:string" dfdlx:direction="unparseOnly"/>
      <dfdl:defineVariable name="priorRemainingDottedAddr" type="xs:string" dfdlx:direction="unparseOnly"/>

      <!-- Parameter for ipAddressGroup -->
      <dfdl:defineVariable name="ipAddressElement" type="xs:string" dfdlx:direction="unparseOnly"/>

    </xs:appinfo>
  </xs:annotation>

  <xs:simpleType name="uint16" dfdl:lengthKind="explicit" dfdl:length="16">
    <xs:restriction base="xs:unsignedInt"/>
  </xs:simpleType>

  <xs:simpleType name="uint32" dfdl:lengthKind="explicit" dfdl:length="32">
    <xs:restriction base="xs:unsignedInt"/>
  </xs:simpleType>

  <xs:simpleType name="int32" dfdl:lengthKind="explicit" dfdl:length="4" dfdl:lengthUnits="bytes">
    <xs:restriction base="xs:int"/>
  </xs:simpleType>

  <xs:simpleType name="bit" dfdl:lengthKind="explicit" dfdl:byteOrder="bigEndian" dfdl:lengthUnits="bits">
    <xs:restriction base="xs:unsignedInt" />
  </xs:simpleType>

  <xs:simpleType name="hexByte" dfdl:lengthKind="explicit" dfdl:byteOrder="bigEndian" dfdl:lengthUnits="bytes">
    <xs:restriction base="xs:hexBinary" />
  </xs:simpleType>

  <xs:element name="PCAP" dfdl:byteOrder="bigEndian">
    <xs:complexType>
      <xs:sequence dfdl:byteOrder="bigEndian">
        <xs:element name="PCAPHeader" dfdl:byteOrder="bigEndian">
          <xs:complexType>
            <xs:sequence dfdl:byteOrder="bigEndian">
              <!-- 
                   We depend on external variable $dfdl:byteOrder to specify what the output's byte order should be. 
               -->
              <!-- 
                   Versions of Daffodil before 2.6.0 had a bug and weren't accepting the dfdl:property syntax for this 
                   outputValueCalc property. So for compatibility with 2.5.0 and 2.4.0 of Daffodil, we've rewritten it
                   to the conventional short-form syntax that is accepted in all releases of Daffodil. 
               -->
              <xs:element name="MagicNumber" type="xs:hexBinary" dfdl:lengthKind="explicit" 
                          dfdl:length="4" dfdl:lengthUnits="bytes" 
                          dfdl:outputValueCalc="{ 
                            if ($dfdl:byteOrder eq 'bigEndian') 
                            then xs:hexBinary('A1B2C3D4') 
                            else xs:hexBinary('D4C3B2A1') 
                          }" >
                <!-- when parsing, however, a PCAP file specifies the byte order in the value of the first element. -->
                <xs:annotation>
                  <xs:appinfo source="http://www.ogf.org/dfdl/">
                    <dfdl:assert message="Magic number was not 0xA1B2C3D4 (for bigEndian) or 0xD4C3B2A1 (for littleEndian)."
                                 test="{ (. eq xs:hexBinary('A1B2C3D4')) or (. eq xs:hexBinary('D4C3B2A1')) }" />
                    <dfdl:setVariable ref="pcap:ByteOrder" 
                      value="{ if (. eq xs:hexBinary('A1B2C3D4')) then 'bigEndian' else 'littleEndian' }" />
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="Version">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Major" type="pcap:uint16" />
                    <xs:element name="Minor" type="pcap:uint16" />
                    <xs:sequence>
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="PCAP version must be 2.4" 
                            test="{ (xs:unsignedInt(./Major) eq 2) and (xs:unsignedInt(./Minor) eq 4) }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:sequence>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Zone" type="pcap:int32" />
              <xs:element name="SigFigs" type="pcap:uint32" />
              <xs:element name="SnapLen" type="pcap:uint32" />
              <xs:element name="Network" type="pcap:uint32" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>

        <xs:element name="Packet" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PacketHeader">
                <xs:complexType>
                  <xs:sequence>
                    <xs:annotation>
                      <xs:appinfo source="http://www.ogf.org/dfdl/">
                        <!--
                        Common subexpression for valueLength call factored out using NVI.
                        Note that this is at unparse time, as it is referenced only from
                        dfdl:outputValueCalc, and note that it is a forward reference into
                        a "later" part of the infoset.
                        -->
                        <dfdl:newVariableInstance ref="pcap:valueLen"
                          defaultValue="{ dfdl:valueLength(../pcap:LinkLayer, 'bytes') }" />
                      </xs:appinfo>
                    </xs:annotation>
                    <xs:element name="Seconds" type="pcap:uint32"/> <!-- TODO: ts_sec should be a dateTime -->
                    <xs:element name="USeconds" type="pcap:uint32"/>
                    <xs:element name="InclLen" type="pcap:uint32" 
                       dfdl:outputValueCalc="{ if ($pcap:valueLen le 60) then 60 else $pcap:valueLen }"/>
                    <xs:element name="OrigLen" type="pcap:uint32" 
                       dfdl:outputValueCalc="{ ../InclLen }"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element ref="pcap:LinkLayer" dfdl:lengthUnits="bytes" dfdl:lengthKind="explicit" dfdl:length="{ ../PacketHeader/InclLen }"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>


  <!-- LINK LAYER -->

  <xs:element name="LinkLayer">
    <xs:complexType>
      <xs:choice>
        <xs:choice dfdl:choiceDispatchKey="{ xs:string(../../PCAPHeader/Network) }">
          <xs:element ref="pcap:Ethernet" dfdl:choiceBranchKey="1"/>
          <!-- add additional network types here -->
        </xs:choice>
        <xs:sequence>
          <!--
            If you want a good diagnostic message about a choice that isn't one of the viable dispatch keys,
            then this nested choice idiom is the way to do that.

            Without this, you'll still get a diagnostic about "All choice alternatives failed" and it will displaty
            the offending choice dispatch key value, and give you the line number in the schema. So not bad, but not
            a specific diagnostic message mentioning the data element that had the incorrect value.
            -->
          <xs:annotation>
            <xs:appinfo source="http://www.ogf.org/dfdl/">
              <dfdl:assert
                message="{ fn:concat('Link layer type unknown. PCAPHeader/Network was ', xs:string(../../PCAPHeader/Network)) }"
                test="{ fn:false() }"/>
            </xs:appinfo>
          </xs:annotation>
        </xs:sequence>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name="Ethernet">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="MACDest" type="pcap:hexByte" dfdl:length="6" />
        <xs:element name="MACSrc" type="pcap:hexByte" dfdl:length="6" />
        <xs:element name="Ethertype" type="pcap:bit" dfdl:length="16"
          dfdl:outputValueCalc="{
          if (fn:exists(../pcap:NetworkLayer/pcap:IPv4)) then 2048
          else if (fn:exists(../pcap:NetworkLayer/pcap:IPv6 )) then 34525
          else fn:error('pcap', 'fn:error called.', .) }"/>
        <xs:element ref="pcap:NetworkLayer" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>


  <!-- NETWORK LAYER -->

  <xs:element name="NetworkLayer">
    <xs:complexType>
      <xs:choice dfdl:choiceDispatchKey="{ xs:string(../Ethertype) }">
        <xs:element dfdl:choiceBranchKey="2048" ref="pcap:IPv4" />
        <xs:element dfdl:choiceBranchKey="34525" ref="pcap:IPv6" />
      </xs:choice>
    </xs:complexType>
  </xs:element>

 <xs:group name="IPSrcGrp">
      <xs:sequence>
        <xs:annotation><xs:appinfo source="http://www.ogf.org/dfdl/">
          <dfdl:newVariableInstance ref="pcap:ipAddressElement" defaultValue='{ IPSrc }'/><!-- example 1.2.3.4 -->
        </xs:appinfo></xs:annotation>
        <xs:element name="IPSrcString">
          <xs:complexType>
            <xs:group ref="pcap:IPAddressGroup"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
  </xs:group>


  <xs:group name="IPDestGrp">
      <xs:sequence>
        <xs:annotation><xs:appinfo source="http://www.ogf.org/dfdl/">
          <dfdl:newVariableInstance ref="pcap:ipAddressElement" defaultValue='{ IPDest }'/><!-- example 1.2.3.4 -->
        </xs:appinfo></xs:annotation>
        <xs:element name="IPDestString">
          <xs:complexType>
            <xs:group ref="pcap:IPAddressGroup"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
  </xs:group>


 <xs:group name="IPAddressGroup">
      <xs:annotation><xs:documentation><![CDATA[
   
      This group is a reusable subroutine of DFDL. It parses a string like 1.2.3.4 into 4 integers named Byte1, Byte2, Byte3, Byte4
      containing the "." separated integers. 
      
      This is used to unparse IP addresses expressed in the dotted notation that is common. 

      There is one parameter. Users must bind the $pcap:ipAddressElement variable to the string to be so parsed. 

      ]]></xs:documentation></xs:annotation>
    <xs:sequence>
      <xs:sequence>
        <xs:annotation><xs:appinfo source="http://www.ogf.org/dfdl/">
          <dfdl:newVariableInstance ref="pcap:priorRemainingDottedAddr" defaultValue='{ $pcap:ipAddressElement }'/><!-- example 1.2.3.4 -->
          <dfdl:newVariableInstance ref="pcap:remainingDottedAddr" defaultValue='{ $pcap:priorRemainingDottedAddr }'/><!-- example 1.2.3.4 -->
        </xs:appinfo></xs:annotation>
        <xs:element name="Byte1" type="xs:unsignedByte" dfdl:outputValueCalc="{
          xs:unsignedByte(fn:substring-before($pcap:remainingDottedAddr, '.'))
          }"/>
        <xs:sequence>
          <xs:annotation><xs:appinfo source="http://www.ogf.org/dfdl/">
            <dfdl:newVariableInstance ref="pcap:priorRemainingDottedAddr" defaultValue='{ $pcap:remainingDottedAddr }'/><!-- example 1.2.3.4 -->
            <dfdl:newVariableInstance ref="pcap:remainingDottedAddr" defaultValue='{ fn:substring-after($pcap:priorRemainingDottedAddr, ".") }'/><!-- example 2.3.4 -->
          </xs:appinfo></xs:annotation>
          <xs:element name="Byte2" type="xs:unsignedByte" dfdl:outputValueCalc="{
           xs:unsignedByte(fn:substring-before($pcap:remainingDottedAddr, '.'))
           }"/>
          <xs:sequence>
            <xs:annotation><xs:appinfo source="http://www.ogf.org/dfdl/">
              <dfdl:newVariableInstance ref="pcap:priorRemainingDottedAddr" defaultValue='{ $pcap:remainingDottedAddr }'/><!-- example 2.3.4 -->
              <dfdl:newVariableInstance ref="pcap:remainingDottedAddr" defaultValue='{ fn:substring-after($pcap:priorRemainingDottedAddr, ".") }'/><!-- example 3.4 -->
            </xs:appinfo></xs:annotation>
            <xs:element name="Byte3" type="xs:unsignedByte" dfdl:outputValueCalc="{
              xs:unsignedByte(fn:substring-before($pcap:remainingDottedAddr, '.'))
              }"/>
            <xs:sequence>
              <xs:annotation><xs:appinfo source="http://www.ogf.org/dfdl/">
                <dfdl:newVariableInstance ref="pcap:priorRemainingDottedAddr" defaultValue='{ $pcap:remainingDottedAddr }'/><!-- example 3.4 -->
                <dfdl:newVariableInstance ref="pcap:remainingDottedAddr" defaultValue='{ fn:substring-after($pcap:priorRemainingDottedAddr, ".") }'/><!-- example 4 -->
              </xs:appinfo></xs:annotation>
              <xs:element name="Byte4" type="xs:unsignedByte" dfdl:outputValueCalc="{
                xs:unsignedByte($pcap:remainingDottedAddr)
                }"/>
            </xs:sequence>
          </xs:sequence>
        </xs:sequence>
      </xs:sequence>
    </xs:sequence>
  </xs:group>

  <xs:element name="IPv4">
    <xs:complexType>
      <xs:sequence>
        <xs:element name='IPv4Header'>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Version" type="pcap:bit" dfdl:length="4" />
              <xs:element name="IHL" type="pcap:bit" dfdl:length="4" />
              <xs:element name="DSCP" type="pcap:bit" dfdl:length="6" />
              <xs:element name="ECN" type="pcap:bit" dfdl:length="2" />
              <xs:element name="Length" type="pcap:bit" dfdl:length="16" 
                dfdl:outputValueCalc="{
                if (fn:exists(../../pcap:TransportLayer))
                then
                  (if (fn:exists(../../pcap:TransportLayer/pcap:UDP))
                    then dfdl:valueLength(../../pcap:TransportLayer/pcap:UDP/Data, 'bytes') + 20 + 8
                    else dfdl:valueLength(../../pcap:TransportLayer/pcap:TCP/Data, 'bytes') + 
                         dfdl:valueLength(../../pcap:TransportLayer/pcap:TCP/TCPHeader/Options, 'bytes') + 20 + 20
                  )
                else if (fn:exists(../../pcap:ICMPv4/EchoRequest))
                     then dfdl:valueLength(../../pcap:ICMPv4/EchoRequest/Payload, 'bytes') + 20 + 8
                     else dfdl:valueLength(../../pcap:ICMPv4/EchoReply/Payload, 'bytes') + 20 + 8
                } "/>
              <xs:element name="Identification" type="pcap:bit" dfdl:length="16" />
              <xs:element name="Flags" type="pcap:bit" dfdl:length="3" />
              <xs:element name="FragmentOffset" type="pcap:bit" dfdl:length="13" />
              <xs:element name="TTL" type="pcap:bit" dfdl:length="8" />
              <xs:element name="Protocol" type="pcap:bit" dfdl:length="8"
                dfdl:outputValueCalc="{ 
                if (fn:exists(../../pcap:ICMPv4)) then 1
                else if (fn:exists(../../pcap:TransportLayer/pcap:TCP)) then 6
                else if (fn:exists(../../pcap:TransportLayer/pcap:UDP)) then 17
                else -1 }"/>
              <xs:element name="Checksum" type="pcap:bit" dfdl:length="16" />
              <xs:sequence dfdl:hiddenGroupRef="pcap:IPSrcGrp"/>
              <xs:element name="IPSrc" type="xs:string" dfdl:inputValueCalc="{ fn:concat(../IPSrcString/Byte1, '.', ../IPSrcString/Byte2, '.', ../IPSrcString/Byte3, '.', ../IPSrcString/Byte4) }"/>
              <xs:sequence dfdl:hiddenGroupRef="pcap:IPDestGrp"/>
              <xs:element name="IPDest" type="xs:string" dfdl:inputValueCalc="{ fn:concat(../IPDestString/Byte1, '.', ../IPDestString/Byte2, '.', ../IPDestString/Byte3, '.', ../IPDestString/Byte4) }"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Protocol" type="xs:unsignedInt" dfdl:inputValueCalc="{ xs:unsignedInt(../IPv4Header/Protocol) }" />
        <xs:choice dfdl:choiceDispatchKey="{ xs:string(./Protocol) }">
            <xs:element dfdl:choiceBranchKey="6 17" ref="pcap:TransportLayer" dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="{ xs:unsignedInt(../IPv4Header/Length) - 20 }" />
            <xs:element dfdl:choiceBranchKey="1" ref="pcap:ICMPv4" dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="{ xs:unsignedInt(../IPv4Header/Length) - 20 }"/>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="ICMPv4">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Type" type="pcap:bit" dfdl:length="8"
          dfdl:outputValueCalc="{
          if (fn:exists(../EchoRequest)) then 8
          else if (fn:exists(../EchoReply )) then 0
          else -1 }"/>
        <xs:element name="Code" type="pcap:bit" dfdl:length="8"
          dfdl:outputValueCalc="{
          if (fn:exists(../EchoRequest)) then 0
          else if (fn:exists(../EchoReply )) then 0
          else -1 }"/>
        <xs:element name="Checksum" type="pcap:bit" dfdl:length="16" />
        <xs:choice dfdl:choiceDispatchKey="{ fn:concat(xs:string(./Type), '_', xs:string(./Code)) }" >
          <xs:element name="EchoRequest" dfdl:choiceBranchKey="8_0">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Identifier" type="pcap:bit" dfdl:length="16" />
                <xs:element name="SequenceNumber" type="pcap:bit" dfdl:length="16" />
                <xs:element name="Payload" type="pcap:hexByte" dfdl:length="{ (../../../IPv4Header/Length - 20) - 8 }"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="EchoReply" dfdl:choiceBranchKey="0_0">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Identifier" type="pcap:bit" dfdl:length="16" />
                <xs:element name="SequenceNumber" type="pcap:bit" dfdl:length="16" />
                <xs:element name="Payload" type="pcap:hexByte" dfdl:length="{ (../../../IPv4Header/Length - 20) - 8 }" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="IPv6">
    <xs:complexType>
      <xs:sequence>
        <xs:element name='IPv6Header'>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Version" type="pcap:bit" dfdl:length="4" />
              <xs:element name="TrafficClass" type="pcap:bit" dfdl:length="8" />
              <xs:element name="FlowLabel" type="pcap:bit" dfdl:length="20" />
              <xs:element name="PayloadLength" type="pcap:bit" dfdl:length="16" 
                dfdl:outputValueCalc="{
                  if (fn:exists(../../pcap:TransportLayer/pcap:UDP))
                    then dfdl:valueLength(../../pcap:TransportLayer/pcap:UDP/Data, 'bytes') + 8
                    else dfdl:valueLength(../../pcap:TransportLayer/pcap:TCP/Data, 'bytes') + dfdl:valueLength(../../pcap:TransportLayer/pcap:TCP/TCPHeader/Options, 'bytes') + 20
                } "/>
              <!-- TODO: Add support for extension headers -->
              <xs:element name="NextHeader" type="pcap:bit" dfdl:length="8"
                dfdl:outputValueCalc="{
                  if (fn:exists(../../pcap:TransportLayer/pcap:TCP )) then 6
                  else if (fn:exists(../../pcap:TransportLayer/pcap:UDP )) then 17
                  else -1 }"/>
              <xs:element name="HopLimit" type="pcap:bit" dfdl:length="8" />
              <xs:element name="IPSrc" type="pcap:hexByte" dfdl:length="16" />
              <xs:element name="IPDest" type="pcap:hexByte" dfdl:length="16" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Protocol" type="xs:unsignedInt" dfdl:inputValueCalc="{ xs:unsignedInt(../IPv6Header/NextHeader) }" />
        <xs:element ref="pcap:TransportLayer" dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="{ xs:unsignedInt(../IPv6Header/PayloadLength) }" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- TRANSPORT LAYER -->

  <xs:element name="TransportLayer">
    <xs:complexType>
      <xs:choice dfdl:choiceDispatchKey="{ xs:string(../Protocol) }">
        <xs:element ref="pcap:TCP" dfdl:choiceBranchKey="6"/>
        <xs:element ref="pcap:UDP" dfdl:choiceBranchKey="17"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name="TCP">
    <xs:complexType>
      <xs:sequence>
        <xs:element name='TCPHeader'>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PortSRC" type="pcap:bit" dfdl:length="16" />
              <xs:element name="PortDest" type="pcap:bit" dfdl:length="16" />
              <xs:element name="Seq" type="pcap:bit" dfdl:length="32" />
              <xs:element name="Ack" type="pcap:bit" dfdl:length="32" />
              <xs:element name="DataOffset" type="pcap:bit" dfdl:length="4"
                dfdl:outputValueCalc="{ xs:unsignedInt((dfdl:valueLength(../Options, 'bytes') div 4) + 5) }" />
              <xs:element name="Reserved" type="pcap:bit" dfdl:length="3" />
              <xs:element name="Flags" type="pcap:bit" dfdl:length="9" />
              <xs:element name="WindowSize" type="pcap:bit" dfdl:length="16" />
              <xs:element name="Checksum" type="pcap:bit" dfdl:length="16" />
              <xs:element name="Urgent" type="pcap:bit" dfdl:length="16" />
              <xs:element name="Options" type="pcap:hexByte" dfdl:length="{ (xs:unsignedInt(../DataOffset) - 5) * 4 }" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Data" type="pcap:hexByte" dfdl:length="{
          if (fn:exists(../../../../pcap:IPv4))
          then ((xs:unsignedInt(../../../../pcap:IPv4/IPv4Header/Length) - 20) - (xs:unsignedInt(../TCPHeader/DataOffset) * 4))
          else (xs:unsignedInt(../../../../pcap:IPv6/IPv6Header/PayloadLength) - (xs:unsignedInt(../TCPHeader/DataOffset) * 4)) }"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="UDP">
    <xs:complexType>
      <xs:sequence>
        <xs:element name='UDPHeader'>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PortSrc" type="pcap:bit" dfdl:length="16" />
              <xs:element name="PortDest" type="pcap:bit" dfdl:length="16" />
              <xs:element name="Length" type="pcap:bit" dfdl:length="16" 
                dfdl:outputValueCalc="{ dfdl:valueLength(../../Data, 'bytes') + 8 }"/>
              <xs:element name="Checksum" type="pcap:bit" dfdl:length="16" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Data" type="pcap:hexByte" dfdl:length="{ xs:unsignedInt(../UDPHeader/Length) - 8 }"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
</xs:schema>
